<?php
namespace Phabric;
use Mockery as m;
/**
 * Test class for Phabric.
 * Generated by PHPUnit on 2011-07-26 at 20:57:02.
 */
class PhabricTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Phabric
     */
    protected $object;

    protected $mockedConnection;

    protected $mockedBus;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->mockedConnection = m::mock('\Doctrine\DBAL\Connection');
        $this->mockedBus = m::mock('\Phabric\Bus');
        $this->object = new \Phabric\Phabric($this->mockedConnection, $this->mockedBus);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        m::close();
    }

    public function testCreate()
    {
        $tableData = array(
            array('name', 'datetime', 'venue', 'description'),
            array('PHPNW', '2011-10-08 09:00:00', 'Ramada Hotel', 'A Great Conf!')
        );

        $expectedInsert =  array('name' => 'PHPNW',
                                 'datetime' => '2011-10-08 09:00:00',
                                 'venue' => 'Ramada Hotel',
                                 'description' => 'A Great Conf!');

        $this->mockedConnection->shouldReceive('insert')
                               ->with('Event', $expectedInsert)
                               ->once();

        $this->object->setTableName('Event');

        $this->object->create($tableData);
    }

    public function testCreateWithNameTransformations()
    {
        $tableData = array(
            array('Name', 'Date', 'Venue', 'Desc'),
            array('PHPNW', '2011-10-08 09:00:00', 'Ramada Hotel', 'A Great Conf!')
        );

        $expectedInsert =  array('name' => 'PHPNW',
                                 'datetime' => '2011-10-08 09:00:00',
                                 'venue' => 'Ramada Hotel',
                                 'description' => 'A Great Conf!');

        $this->mockedConnection->shouldReceive('insert')
                               ->with('Event', $expectedInsert)
                               ->once();

        $this->object->setTableName('Event');
        $this->object->setNameTranslations(array('Date' => 'datetime',
                                                'Desc' => 'description'));

        $this->object->create($tableData);
    }

    public function testCreateWithDefaults()
    {
        $tableData = array(
            array('name', 'datetime', 'venue'),
            array('PHPNW', '2011-10-08 09:00:00', 'Ramada Hotel')
        );

        $expectedInsert =  array('name' => 'PHPNW',
                                 'datetime' => '2011-10-08 09:00:00',
                                 'venue' => 'Ramada Hotel',
                                 'description' => 'TEST DESCRIPTION');

        $this->mockedConnection->shouldReceive('insert')
                               ->with('Event', $expectedInsert)
                               ->once();

        $this->object->setTableName('Event');
        $this->object->setDefaults(array(
                        'description' => 'TEST DESCRIPTION',
                        'venue' => 'TEST VENUE'
            ));

        $this->object->create($tableData);
    }

    public function testCreateWithDataTranslations()
    {
        $tableData = array(
            array('name', 'datetime', 'venue', 'description'),
            array('PHPNW', '08/10/2011 09:00', 'Ramada Hotel', 'A Great Conf!')
        );

        $expectedInsert =  array('name' => 'PHPNW',
                                 'datetime' => '2011-10-08 09:00:00',
                                 'venue' => 'Ramada Hotel',
                                 'description' => 'A Great Conf!');

        $this->mockedConnection->shouldReceive('insert')
                               ->with('Event', $expectedInsert)
                               ->once();

        $this->object->setTableName('Event');

        $retFn = function($date){
                    $date = \DateTime::createFromFormat('d/m/Y H:i', $date);
                    return $date->format('Y-m-d H:i:s');
                };

        $this->mockedBus->shouldReceive('getNamedDataTranslation')
                        ->with('UKTOMYSQLDATE')
                        ->once()
                        ->andReturn($retFn);


        $this->object->setDataTranslations(array('datetime' => 'UKTOMYSQLDATE'));

        $this->object->create($tableData);
    }

    /**
     * @expectedException InvalidArgumentException
     */
    public function testRegisterNamedDataTranslationInvalidCallable()
    {
        $this->object->registerNamedDataTranslation('test', 'test');
    }

    public function testCreateWithMultipleFeaturesEnabled()
    {
        $tableData = array(
            array('Name', 'Date', 'Venue'),
            array('PHPNW', '08/10/2011 09:00', 'Ramada Hotel')
        );

        $expectedInsert =  array('name' => 'PHPNW',
                                 'datetime' => '2011-10-08 09:00:00',
                                 'venue' => 'Ramada Hotel',
                                 'description' => 'TEST DESCRIPTION');

        $this->mockedConnection->shouldReceive('insert')
                               ->with('Event', $expectedInsert)
                               ->once();

        $this->object->setTableName('Event');
        $this->object->setNameTranslations(array('Date' => 'datetime'));

        $this->object->setDefaults(array(
                        'description' => 'TEST DESCRIPTION',
                        'venue' => 'TEST VENUE'
            ));

        $retFn = function($date){
                    $date = \DateTime::createFromFormat('d/m/Y H:i', $date);
                    return $date->format('Y-m-d H:i:s');
                };

        $this->mockedBus->shouldReceive('getNamedDataTranslation')
                        ->with('UKTOMYSQLDATE')
                        ->once()
                        ->andReturn($retFn);

        $this->object->setDataTranslations(array('datetime' => 'UKTOMYSQLDATE'));

        $this->object->create($tableData);
    }

}

?>
