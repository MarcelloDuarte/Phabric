<?php
namespace Phabric;
use Mockery as m;
/**
 * Test class for Phabric.
 * Generated by PHPUnit on 2011-07-26 at 20:57:02.
 */
class PhabricTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Phabric
     */
    protected $object;

    protected $mockedConnection;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->mockedConnection = m::mock('\Doctrine\DBAL\Connection');
        $this->object = new \Phabric\Phabric($this->mockedConnection);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        m::close();
    }

    public function testCreate()
    {
        $tableData = array(
            array('name', 'datetime', 'venue', 'description'),
            array('PHPNW', '2011-10-08 09:00:00', 'Ramada Hotel', 'A Great Conf!')
        );

        $expectedInsert =  array('name' => 'PHPNW',
                                 'datetime' => '2011-10-08 09:00:00',
                                 'venue' => 'Ramada Hotel',
                                 'description' => 'A Great Conf!');

        $this->mockedConnection->shouldReceive('insert')
                               ->with('Event', $expectedInsert)
                               ->once();

        $this->object->setTableName('Event');

        $this->object->create($tableData);
    }

    public function testCreateWithNameTransformations()
    {
        $tableData = array(
            array('Name', 'Date', 'Venue', 'Desc'),
            array('PHPNW', '2011-10-08 09:00:00', 'Ramada Hotel', 'A Great Conf!')
        );

        $expectedInsert =  array('name' => 'PHPNW',
                                 'datetime' => '2011-10-08 09:00:00',
                                 'venue' => 'Ramada Hotel',
                                 'description' => 'A Great Conf!');

        $this->mockedConnection->shouldReceive('insert')
                               ->with('Event', $expectedInsert)
                               ->once();

        $this->object->setTableName('Event');
        $this->object->setNameTranslations(array('Date' => 'datetime',
                                                'Desc' => 'description'));

        $this->object->create($tableData);
    }

}

?>
